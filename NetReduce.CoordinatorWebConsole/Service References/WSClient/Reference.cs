//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NetReduce.CoordinatorWebConsole.WSClient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WSClient.IRemoteWorkerService")]
    public interface IRemoteWorkerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/Init", ReplyAction="http://tempuri.org/IRemoteWorkerService/InitResponse")]
        void Init(int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/Init", ReplyAction="http://tempuri.org/IRemoteWorkerService/InitResponse")]
        System.Threading.Tasks.Task InitAsync(int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/Map", ReplyAction="http://tempuri.org/IRemoteWorkerService/MapResponse")]
        void Map(System.Uri uri, System.Uri mapFuncUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/Map", ReplyAction="http://tempuri.org/IRemoteWorkerService/MapResponse")]
        System.Threading.Tasks.Task MapAsync(System.Uri uri, System.Uri mapFuncUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/Reduce", ReplyAction="http://tempuri.org/IRemoteWorkerService/ReduceResponse")]
        void Reduce(System.Uri uri, System.Uri reduceFuncUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/Reduce", ReplyAction="http://tempuri.org/IRemoteWorkerService/ReduceResponse")]
        System.Threading.Tasks.Task ReduceAsync(System.Uri uri, System.Uri reduceFuncUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/TryJoin", ReplyAction="http://tempuri.org/IRemoteWorkerService/TryJoinResponse")]
        string[] TryJoin(int workerId, System.Uri callbackUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/TryJoin", ReplyAction="http://tempuri.org/IRemoteWorkerService/TryJoinResponse")]
        System.Threading.Tasks.Task<string[]> TryJoinAsync(int workerId, System.Uri callbackUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/TransferFiles", ReplyAction="http://tempuri.org/IRemoteWorkerService/TransferFilesResponse")]
        System.Uri[] TransferFiles(int workerId, System.Collections.Generic.Dictionary<string, System.Uri> keysAndUris);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/TransferFiles", ReplyAction="http://tempuri.org/IRemoteWorkerService/TransferFilesResponse")]
        System.Threading.Tasks.Task<System.Uri[]> TransferFilesAsync(int workerId, System.Collections.Generic.Dictionary<string, System.Uri> keysAndUris);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/PushFile", ReplyAction="http://tempuri.org/IRemoteWorkerService/PushFileResponse")]
        System.Uri PushFile(int workerId, string fileName, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/PushFile", ReplyAction="http://tempuri.org/IRemoteWorkerService/PushFileResponse")]
        System.Threading.Tasks.Task<System.Uri> PushFileAsync(int workerId, string fileName, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/GetPerformanceStatistics", ReplyAction="http://tempuri.org/IRemoteWorkerService/GetPerformanceStatisticsResponse")]
        NetReduce.Core.PerformanceMonitor.PerformanceStatistics GetPerformanceStatistics();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/GetPerformanceStatistics", ReplyAction="http://tempuri.org/IRemoteWorkerService/GetPerformanceStatisticsResponse")]
        System.Threading.Tasks.Task<NetReduce.Core.PerformanceMonitor.PerformanceStatistics> GetPerformanceStatisticsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoteWorkerServiceChannel : NetReduce.CoordinatorWebConsole.WSClient.IRemoteWorkerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoteWorkerServiceClient : System.ServiceModel.ClientBase<NetReduce.CoordinatorWebConsole.WSClient.IRemoteWorkerService>, NetReduce.CoordinatorWebConsole.WSClient.IRemoteWorkerService {
        
        public RemoteWorkerServiceClient() {
        }
        
        public RemoteWorkerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RemoteWorkerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteWorkerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteWorkerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Init(int workerId) {
            base.Channel.Init(workerId);
        }
        
        public System.Threading.Tasks.Task InitAsync(int workerId) {
            return base.Channel.InitAsync(workerId);
        }
        
        public void Map(System.Uri uri, System.Uri mapFuncUri) {
            base.Channel.Map(uri, mapFuncUri);
        }
        
        public System.Threading.Tasks.Task MapAsync(System.Uri uri, System.Uri mapFuncUri) {
            return base.Channel.MapAsync(uri, mapFuncUri);
        }
        
        public void Reduce(System.Uri uri, System.Uri reduceFuncUri) {
            base.Channel.Reduce(uri, reduceFuncUri);
        }
        
        public System.Threading.Tasks.Task ReduceAsync(System.Uri uri, System.Uri reduceFuncUri) {
            return base.Channel.ReduceAsync(uri, reduceFuncUri);
        }
        
        public string[] TryJoin(int workerId, System.Uri callbackUri) {
            return base.Channel.TryJoin(workerId, callbackUri);
        }
        
        public System.Threading.Tasks.Task<string[]> TryJoinAsync(int workerId, System.Uri callbackUri) {
            return base.Channel.TryJoinAsync(workerId, callbackUri);
        }
        
        public System.Uri[] TransferFiles(int workerId, System.Collections.Generic.Dictionary<string, System.Uri> keysAndUris) {
            return base.Channel.TransferFiles(workerId, keysAndUris);
        }
        
        public System.Threading.Tasks.Task<System.Uri[]> TransferFilesAsync(int workerId, System.Collections.Generic.Dictionary<string, System.Uri> keysAndUris) {
            return base.Channel.TransferFilesAsync(workerId, keysAndUris);
        }
        
        public System.Uri PushFile(int workerId, string fileName, string content) {
            return base.Channel.PushFile(workerId, fileName, content);
        }
        
        public System.Threading.Tasks.Task<System.Uri> PushFileAsync(int workerId, string fileName, string content) {
            return base.Channel.PushFileAsync(workerId, fileName, content);
        }
        
        public NetReduce.Core.PerformanceMonitor.PerformanceStatistics GetPerformanceStatistics() {
            return base.Channel.GetPerformanceStatistics();
        }
        
        public System.Threading.Tasks.Task<NetReduce.Core.PerformanceMonitor.PerformanceStatistics> GetPerformanceStatisticsAsync() {
            return base.Channel.GetPerformanceStatisticsAsync();
        }
    }
}

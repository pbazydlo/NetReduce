@{
    ViewBag.Title = "Coordinator Management";
}

<h2>Coordinator management</h2>

<div class="row">
    <div class="col-lg-6">
        <div class="row">
            <div class="panel panel-default" data-bind="with: WorkersManagement">
                <div class="panel-heading">
                    <h3>Workers</h3>
                </div>
                <div class="panel-body">
                    <div data-bind="visible: IsLoading">Loading...</div>
                    <div data-bind="visible: !IsLoading()">
                        <table class="table table-bordered table-condensed table-responsive table-striped">
                            <thead>
                                <tr>
                                    <th>Endpoint URI <i class="glyphicon glyphicon-refresh pull-right" data-bind="click: ReloadWorkers"></i></th>
                                    <th>CPU</th>
                                    <th>Memory</th>
                                    <th>Disk</th>
                                </tr>
                            </thead>
                            <tbody data-bind="foreach: Workers">
                                <tr>
                                    <td data-bind="text: Uri"></td>
                                    <td data-bind="text: Cpu"></td>
                                    <td data-bind="text: Memory"></td>
                                    <td data-bind="text: Disk"></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3>Files</h3>
                </div>
                <div class="panel-body" style="overflow: scroll">
                    <div>
                        <table class="table table-bordered table-condensed table-responsive table-striped">
                            <thead>
                                <tr>
                                    <th>P</th>
                                    <th>MC</th>
                                    <th>RC</th>
                                    <th>File URI</th>
                                    <th>&nbsp;</th>
                                </tr>
                            </thead>
                            <tbody data-bind="foreach: Files">
                                <tr>
                                    <td>
                                        <input type="checkbox" class="form-control" style="height: auto;width:auto" data-bind="checked: ToProcess" />
                                    </td>
                                    <td>
                                        <input type="radio" name="MC" class="form-control" style="height: auto;width:auto" data-bind="checked: IsMapCode" />
                                    </td>
                                    <td>
                                        <input type="radio" name="RC" class="form-control" style="height: auto;width:auto" data-bind="checked: IsReduceCode" />
                                    </td>
                                    <td data-bind="text: Uri"></td>
                                    <td>
                                        <div class="btn-group">
                                            <button class="btn btn-danger" data-bind="click: Remove">Remove<span data-bind="visible: IsRemoving">...</span> <i class="glyphicon glyphicon-remove"></i></button>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div>
                        @using (Ajax.BeginForm("Files", "Coordinator", new AjaxOptions()
                    {
                        HttpMethod = "Post"
                    }, new { enctype = "multipart/form-data" }))
                        {
                            <div class="form-group">
                                <label for="newFile">New File</label>
                                <input type="file" name="files" class="form-control" />
                            </div>
                            <div class="progress" id="fileUploadProgressBar">
                                <div class="bar" id="fileUploadBar"></div>
                            </div>
                            <button class="btn btn-success">Submit File</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="panel panel-default" >
            <div class="panel-heading">
                <h3>Task</h3>
            </div>
            <div class="panel-body" style="overflow: scroll">
                <div data-bind="with: MRResults">
                    <strong>Status</strong>
                    <span data-bind="text: Status">Not running</span>
                </div>
                <div>
                    <strong>Results</strong>
                </div>
                <table class="table table-bordered table-condensed table-responsive table-striped" data-bind="with: MRResults">
                    <thead>
                        <tr>
                            <th>Key</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: Results">
                        <tr>
                            <td><em data-bind="text: Key"></em></td>
                            <td><p data-bind="text: Value"></p></td>
                        </tr>
                    </tbody>
                </table>
                <div>
                    <div class="input-group">
                        <label for="noMap">Number of mappers </label>
                        <input name="noMap" type="number" data-bind="value: NoOfMappers" placeholder="Number of mappers"/>
                    </div>
                    <div class="input-group">
                        <label for="noRed">Number of reducers </label>
                        <input name="noRed" type="number" data-bind="value: NoOfReducers" placeholder="Number of reducers" />
                    </div>
                    <button class="btn btn-primary" data-bind="click: SubmitTask">Submit Job<span data-bind="visible: IsTaskSubmitting">...</span></button>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script type="text/javascript">
        function KeyResultViewModel(key, value) {
            var self = this;
            self.Key = ko.observable(key);
            self.Value = ko.observable(value);
        }

        function MapReduceResultsViewModel(status, results) {
            var self = this;
            self.Status = ko.observable(status);
            self.Results = ko.observableArray(results);
        }

        function FileViewModel(uri, removeUrl, parent) {
            var self = this;
            self.Uri = ko.observable(uri);
            self.ToProcess = ko.observable(false);
            self.IsMapCode = ko.observable(false);
            self.IsReduceCode = ko.observable(false);
            self.IsRemoving = ko.observable(false);
            self.Remove = function () {
                if (!self.IsRemoving()) {
                    self.IsRemoving(true);
                    $.ajax({
                        url: removeUrl,
                        type: "POST",
                        data: {
                            uri: self.Uri()
                        },
                        success: function (result) {
                            self.IsRemoving(false);
                            parent.ReloadFiles();
                        },
                        error: function () {
                            self.IsRemoving(false);
                        }
                    })
                }
            }
        }

        function WorkerViewModel(uri, cpu, memory, getPerformanceUrl) {
            var self = this;
            self.Uri = ko.observable(uri);
            self.Cpu = ko.observable(cpu);
            self.Memory = ko.observable(memory);
            self.Disk = ko.observable("");
            self.RefreshPerformance = function () {
                $.ajax({
                    url: getPerformanceUrl,
                    type: "GET",
                    data: {
                        uri: self.Uri()
                    },
                    success: function (result) {
                        self.Cpu(result.CPU);
                        self.Memory(result.Memory);
                        self.Disk(result.Disk);

                        setTimeout(self.RefreshPerformance, 2500);
                    },
                    error: function () {
                    }
                })
            }

            self.RefreshPerformance();
        }

        function WorkersViewModel(getWorkersUrl, addWorkerUrl, getPerformanceUrl) {
            var self = this;

            function loadWorkersFromList(result) {
                var workers = [];
                for (var i in result) {
                    var workerUri = result[i];
                    workers.push(new WorkerViewModel(workerUri, "", "", getPerformanceUrl));
                }

                self.Workers(workers);
            }

            self.IsNewWorkerAdding = ko.observable(false);
            self.NewWorkerUri = ko.observable("");
            self.AddNewWorker = function () {
                if (!self.IsNewWorkerAdding()) {
                    self.IsNewWorkerAdding(true);
                    $.ajax({
                        url: addWorkerUrl,
                        type: "POST",
                        data: {
                            uriString: self.NewWorkerUri()
                        },
                        success: function (result) {
                            loadWorkersFromList(result.Uris);
                            self.IsNewWorkerAdding(false);
                        },
                        error: function () {
                            self.IsNewWorkerAdding(false);
                        }
                    })
                }
            }

            self.IsLoading = ko.observable(false);
            self.Workers = ko.observableArray([]);
            self.ReloadWorkers = function () {
                if (!self.IsLoading()) {
                    self.IsLoading(true);
                    $.ajax({
                        url: getWorkersUrl,
                        type: "GET",
                        success: function (result) {
                            loadWorkersFromList(result);
                            self.IsLoading(false);
                        },
                        error: function () {
                            self.IsLoading(false);
                        }
                    })
                }
            }

            self.ReloadWorkers();
        }

        function CoordinatorManagementViewModel(getWorkersUrl, addWorkerUrl, submitTaskUrl, getFilesUrl,
            removeFileUrl, getResultsUrl, getPerformanceUrl) {
            var self = this;

            self.WorkersManagement = new WorkersViewModel(getWorkersUrl, addWorkerUrl, getPerformanceUrl);
            self.IsTaskSubmitting = ko.observable(false);
            self.MapCode = ko.observable("");
            self.ReduceCode = ko.observable("");
            self.NoOfMappers = ko.observable(10);
            self.NoOfReducers = ko.observable(10);
            self.SubmitTask = function () {
                if (!self.IsTaskSubmitting()) {
                    self.IsTaskSubmitting(true);
                    var filesToProc = self.searchInFiles(function (f) { return f.ToProcess(); });
                    var mapFiles = self.searchInFiles(function (f) { return f.IsMapCode(); });
                    var mapFile = null;
                    if (mapFiles.length > 0) {
                        mapFile = mapFiles[0];
                    }

                    var reduceFiles = self.searchInFiles(function (f) { return f.IsReduceCode(); });
                    var reduceFile = null;
                    if (reduceFiles.length > 0) {
                        reduceFile = reduceFiles[0];
                    }

                    if (mapFile != null && reduceFile != null) {
                        $.ajax({
                            url: submitTaskUrl,
                            type: "POST",
                            traditional: true,
                            data: {
                                // filesToProcess, Uri mapCode, Uri reduceCode
                                filesToProcess: filesToProc,
                                mapCode: mapFile,
                                reduceCode: reduceFile,
                                noOfMappers: self.NoOfMappers(),
                                noOfReducers: self.NoOfReducers()
                            },
                            success: function (result) {
                                self.IsTaskSubmitting(false);
                            },
                            error: function () {
                                self.IsTaskSubmitting(false);
                            }
                        })
                    } else {
                        self.IsTaskSubmitting(false);
                    }
                }
            }
            self.Files = ko.observableArray([new FileViewModel("test")]);
            self.MRResults = ko.observable(new MapReduceResultsViewModel());
            self.IsReloadingFiles = ko.observable(false);
            self.ReloadFiles = function () {
                if (!self.IsReloadingFiles()) {
                    self.IsReloadingFiles(true);
                    $.ajax({
                        url: getFilesUrl,
                        type: "GET",
                        success: function (result) {
                            var files = [];
                            for (var i in result) {
                                var file = result[i];
                                files.push(new FileViewModel(file, removeFileUrl, self));
                            }

                            self.Files(files);
                            self.IsReloadingFiles(false);
                        },
                        error: function () {
                            self.IsReloadingFiles(false);
                        }
                    })
                }
            }
            self.IsResultsReloading = ko.observable(false);
            self.ReloadResults = function () {
                if (!self.IsResultsReloading()) {
                    self.IsResultsReloading(true);
                    $.ajax({
                        url: getResultsUrl,
                        type: "GET",
                        success: function (result) {
                            var res = new MapReduceResultsViewModel(result.Status, result.Results);
                            if (res.Status() != self.MRResults().Status()) {
                                self.ReloadFiles();
                            }

                            self.MRResults(res);

                            self.IsResultsReloading(false);
                            setTimeout(self.ReloadResults, 1000);
                        },
                        error: function () {
                            self.IsResultsReloading(false);
                            setTimeout(self.ReloadResults, 4000);
                        }
                    })
                }
            }
            self.searchInFiles = function (condition) {
                var files = self.Files();
                var result = [];
                for (var i in files) {
                    var file = files[i];
                    if (condition(file)) {
                        result.push(file.Uri());
                    }
                }

                return result;
            }

            self.ReloadFiles();
            self.ReloadResults();
        }
        var viewModel = new CoordinatorManagementViewModel('@Url.Action("Uris", "Coordinator")',
            '@Url.Action("Uris", "Coordinator")', '@Url.Action("Task", "Coordinator")', '@Url.Action("Files", "Coordinator")',
            '@Url.Action("RemoveFile", "Coordinator")', '@Url.Action("Results","Coordinator")', '@Url.Action("PerformanceStatistics", "Coordinator")');
        ko.applyBindings(viewModel);

        $(document).ready(function () {
            var bar = $('#fileUploadBar');
            $('#fileUploadProgressBar').toggle();

            $('form').ajaxForm({
                beforeSend: function () {
                    var percentVal = '0%';
                    bar.width(percentVal);
                    $('#fileUploadProgressBar').toggle();
                },
                uploadProgress: function (event, position, total, percentComplete) {
                    var percentVal = percentComplete + '%';
                    bar.width(percentVal);
                },
                success: function () {
                    var percentVal = '100%';
                    bar.width(percentVal);
                },
                complete: function (xhr) {
                    $('#fileUploadProgressBar').toggle();
                    viewModel.ReloadFiles();
                    // status.html(xhr.responseText);
                }
            });
        })
    </script>
}
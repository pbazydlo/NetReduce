//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NetReduce.WorkerService.CSClient {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MapReduceResult", Namespace="http://schemas.datacontract.org/2004/07/NetReduce.CoordinatorService")]
    [System.SerializableAttribute()]
    public partial class MapReduceResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRunningField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Tuple<string, string>[] KeysAndValuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRunning {
            get {
                return this.IsRunningField;
            }
            set {
                if ((this.IsRunningField.Equals(value) != true)) {
                    this.IsRunningField = value;
                    this.RaisePropertyChanged("IsRunning");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Tuple<string, string>[] KeysAndValues {
            get {
                return this.KeysAndValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.KeysAndValuesField, value) != true)) {
                    this.KeysAndValuesField = value;
                    this.RaisePropertyChanged("KeysAndValues");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CSClient.ICoordinatorService")]
    public interface ICoordinatorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/AddWorker", ReplyAction="http://tempuri.org/ICoordinatorService/AddWorkerResponse")]
        void AddWorker(System.Uri uri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/AddWorker", ReplyAction="http://tempuri.org/ICoordinatorService/AddWorkerResponse")]
        System.Threading.Tasks.Task AddWorkerAsync(System.Uri uri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/GetWorkers", ReplyAction="http://tempuri.org/ICoordinatorService/GetWorkersResponse")]
        System.Uri[] GetWorkers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/GetWorkers", ReplyAction="http://tempuri.org/ICoordinatorService/GetWorkersResponse")]
        System.Threading.Tasks.Task<System.Uri[]> GetWorkersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/RemoveWorker", ReplyAction="http://tempuri.org/ICoordinatorService/RemoveWorkerResponse")]
        void RemoveWorker(System.Uri uri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/RemoveWorker", ReplyAction="http://tempuri.org/ICoordinatorService/RemoveWorkerResponse")]
        System.Threading.Tasks.Task RemoveWorkerAsync(System.Uri uri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/RunJob", ReplyAction="http://tempuri.org/ICoordinatorService/RunJobResponse")]
        bool RunJob(int numberOfMappers, int numberOfReducers, System.Uri mapCodeFile, System.Uri reduceCodeFile, System.Uri[] filesToProcess);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/RunJob", ReplyAction="http://tempuri.org/ICoordinatorService/RunJobResponse")]
        System.Threading.Tasks.Task<bool> RunJobAsync(int numberOfMappers, int numberOfReducers, System.Uri mapCodeFile, System.Uri reduceCodeFile, System.Uri[] filesToProcess);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/AddToStorage", ReplyAction="http://tempuri.org/ICoordinatorService/AddToStorageResponse")]
        System.Uri AddToStorage(string fileName, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/AddToStorage", ReplyAction="http://tempuri.org/ICoordinatorService/AddToStorageResponse")]
        System.Threading.Tasks.Task<System.Uri> AddToStorageAsync(string fileName, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/ListStorageFiles", ReplyAction="http://tempuri.org/ICoordinatorService/ListStorageFilesResponse")]
        System.Uri[] ListStorageFiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/ListStorageFiles", ReplyAction="http://tempuri.org/ICoordinatorService/ListStorageFilesResponse")]
        System.Threading.Tasks.Task<System.Uri[]> ListStorageFilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/RemoveFromStorage", ReplyAction="http://tempuri.org/ICoordinatorService/RemoveFromStorageResponse")]
        void RemoveFromStorage(System.Uri uri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/RemoveFromStorage", ReplyAction="http://tempuri.org/ICoordinatorService/RemoveFromStorageResponse")]
        System.Threading.Tasks.Task RemoveFromStorageAsync(System.Uri uri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/CleanStorage", ReplyAction="http://tempuri.org/ICoordinatorService/CleanStorageResponse")]
        void CleanStorage();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/CleanStorage", ReplyAction="http://tempuri.org/ICoordinatorService/CleanStorageResponse")]
        System.Threading.Tasks.Task CleanStorageAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/GetResults", ReplyAction="http://tempuri.org/ICoordinatorService/GetResultsResponse")]
        NetReduce.WorkerService.CSClient.MapReduceResult GetResults();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoordinatorService/GetResults", ReplyAction="http://tempuri.org/ICoordinatorService/GetResultsResponse")]
        System.Threading.Tasks.Task<NetReduce.WorkerService.CSClient.MapReduceResult> GetResultsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICoordinatorServiceChannel : NetReduce.WorkerService.CSClient.ICoordinatorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CoordinatorServiceClient : System.ServiceModel.ClientBase<NetReduce.WorkerService.CSClient.ICoordinatorService>, NetReduce.WorkerService.CSClient.ICoordinatorService {
        
        public CoordinatorServiceClient() {
        }
        
        public CoordinatorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CoordinatorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CoordinatorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CoordinatorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddWorker(System.Uri uri) {
            base.Channel.AddWorker(uri);
        }
        
        public System.Threading.Tasks.Task AddWorkerAsync(System.Uri uri) {
            return base.Channel.AddWorkerAsync(uri);
        }
        
        public System.Uri[] GetWorkers() {
            return base.Channel.GetWorkers();
        }
        
        public System.Threading.Tasks.Task<System.Uri[]> GetWorkersAsync() {
            return base.Channel.GetWorkersAsync();
        }
        
        public void RemoveWorker(System.Uri uri) {
            base.Channel.RemoveWorker(uri);
        }
        
        public System.Threading.Tasks.Task RemoveWorkerAsync(System.Uri uri) {
            return base.Channel.RemoveWorkerAsync(uri);
        }
        
        public bool RunJob(int numberOfMappers, int numberOfReducers, System.Uri mapCodeFile, System.Uri reduceCodeFile, System.Uri[] filesToProcess) {
            return base.Channel.RunJob(numberOfMappers, numberOfReducers, mapCodeFile, reduceCodeFile, filesToProcess);
        }
        
        public System.Threading.Tasks.Task<bool> RunJobAsync(int numberOfMappers, int numberOfReducers, System.Uri mapCodeFile, System.Uri reduceCodeFile, System.Uri[] filesToProcess) {
            return base.Channel.RunJobAsync(numberOfMappers, numberOfReducers, mapCodeFile, reduceCodeFile, filesToProcess);
        }
        
        public System.Uri AddToStorage(string fileName, string content) {
            return base.Channel.AddToStorage(fileName, content);
        }
        
        public System.Threading.Tasks.Task<System.Uri> AddToStorageAsync(string fileName, string content) {
            return base.Channel.AddToStorageAsync(fileName, content);
        }
        
        public System.Uri[] ListStorageFiles() {
            return base.Channel.ListStorageFiles();
        }
        
        public System.Threading.Tasks.Task<System.Uri[]> ListStorageFilesAsync() {
            return base.Channel.ListStorageFilesAsync();
        }
        
        public void RemoveFromStorage(System.Uri uri) {
            base.Channel.RemoveFromStorage(uri);
        }
        
        public System.Threading.Tasks.Task RemoveFromStorageAsync(System.Uri uri) {
            return base.Channel.RemoveFromStorageAsync(uri);
        }
        
        public void CleanStorage() {
            base.Channel.CleanStorage();
        }
        
        public System.Threading.Tasks.Task CleanStorageAsync() {
            return base.Channel.CleanStorageAsync();
        }
        
        public NetReduce.WorkerService.CSClient.MapReduceResult GetResults() {
            return base.Channel.GetResults();
        }
        
        public System.Threading.Tasks.Task<NetReduce.WorkerService.CSClient.MapReduceResult> GetResultsAsync() {
            return base.Channel.GetResultsAsync();
        }
    }
}

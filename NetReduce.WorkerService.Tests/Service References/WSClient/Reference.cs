//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NetReduce.WorkerService.Tests.WSClient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WSClient.IRemoteWorkerService")]
    public interface IRemoteWorkerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/Init", ReplyAction="http://tempuri.org/IRemoteWorkerService/InitResponse")]
        void Init(int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/Init", ReplyAction="http://tempuri.org/IRemoteWorkerService/InitResponse")]
        System.Threading.Tasks.Task InitAsync(int workerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/Map", ReplyAction="http://tempuri.org/IRemoteWorkerService/MapResponse")]
        void Map(int workerId, string uri, string mapFuncUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/Map", ReplyAction="http://tempuri.org/IRemoteWorkerService/MapResponse")]
        System.Threading.Tasks.Task MapAsync(int workerId, string uri, string mapFuncUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/Reduce", ReplyAction="http://tempuri.org/IRemoteWorkerService/ReduceResponse")]
        void Reduce(int workerId, string uri, string reduceFuncUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/Reduce", ReplyAction="http://tempuri.org/IRemoteWorkerService/ReduceResponse")]
        System.Threading.Tasks.Task ReduceAsync(int workerId, string uri, string reduceFuncUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/TryJoin", ReplyAction="http://tempuri.org/IRemoteWorkerService/TryJoinResponse")]
        bool TryJoin(int workerId, string callbackUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteWorkerService/TryJoin", ReplyAction="http://tempuri.org/IRemoteWorkerService/TryJoinResponse")]
        System.Threading.Tasks.Task<bool> TryJoinAsync(int workerId, string callbackUri);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoteWorkerServiceChannel : NetReduce.WorkerService.Tests.WSClient.IRemoteWorkerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoteWorkerServiceClient : System.ServiceModel.ClientBase<NetReduce.WorkerService.Tests.WSClient.IRemoteWorkerService>, NetReduce.WorkerService.Tests.WSClient.IRemoteWorkerService {
        
        public RemoteWorkerServiceClient() {
        }
        
        public RemoteWorkerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RemoteWorkerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteWorkerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteWorkerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Init(int workerId) {
            base.Channel.Init(workerId);
        }
        
        public System.Threading.Tasks.Task InitAsync(int workerId) {
            return base.Channel.InitAsync(workerId);
        }
        
        public void Map(int workerId, string uri, string mapFuncUri) {
            base.Channel.Map(workerId, uri, mapFuncUri);
        }
        
        public System.Threading.Tasks.Task MapAsync(int workerId, string uri, string mapFuncUri) {
            return base.Channel.MapAsync(workerId, uri, mapFuncUri);
        }
        
        public void Reduce(int workerId, string uri, string reduceFuncUri) {
            base.Channel.Reduce(workerId, uri, reduceFuncUri);
        }
        
        public System.Threading.Tasks.Task ReduceAsync(int workerId, string uri, string reduceFuncUri) {
            return base.Channel.ReduceAsync(workerId, uri, reduceFuncUri);
        }
        
        public bool TryJoin(int workerId, string callbackUri) {
            return base.Channel.TryJoin(workerId, callbackUri);
        }
        
        public System.Threading.Tasks.Task<bool> TryJoinAsync(int workerId, string callbackUri) {
            return base.Channel.TryJoinAsync(workerId, callbackUri);
        }
    }
}
